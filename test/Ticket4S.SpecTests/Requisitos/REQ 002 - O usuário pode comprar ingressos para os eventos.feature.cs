// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Ticket4S.SpecTests.Requisitos
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class OUsuarioPodeComprarIngressosParaUmEventosFeature : Xunit.IClassFixture<OUsuarioPodeComprarIngressosParaUmEventosFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "REQ 002 - O usuário pode comprar ingressos para os eventos.feature"
#line hidden
        
        public OUsuarioPodeComprarIngressosParaUmEventosFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "O usuário pode comprar ingressos para um eventos", "\tEu, como usuário do Site devo poder\r\n\tComprar ingressos para um Evento.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(OUsuarioPodeComprarIngressosParaUmEventosFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "O usuário pode comprar ingressos para um eventos")]
        [Xunit.TraitAttribute("Description", "Escolhido o Evento que desejo comprar ingressos.")]
        public virtual void EscolhidoOEventoQueDesejoComprarIngressos_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Escolhido o Evento que desejo comprar ingressos.", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.When("O Usuário selecionar um Evento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 7
 testRunner.Then("os detalhes do Evento devem ser exibidos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 8
 testRunner.And("os Tipos de Ingressos devem ser todos listados em conjunto com a informação se ai" +
                    "nda estão disponiveis para compra.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 10
 testRunner.When("o Usário escolher um Tipo de Ingresso disponível", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 11
 testRunner.And("o Usuário estiver deslogado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 12
 testRunner.Then("ele será solicitado que se logue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 13
 testRunner.Then("ele irá confirmar a compra de ingresso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line 15
 testRunner.When("o Usário escolher um Tipo de Ingresso disponível", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 16
 testRunner.And("o Usuário estiver logado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 17
 testRunner.Then("ele irá confirmar a compra de ingresso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                OUsuarioPodeComprarIngressosParaUmEventosFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                OUsuarioPodeComprarIngressosParaUmEventosFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
