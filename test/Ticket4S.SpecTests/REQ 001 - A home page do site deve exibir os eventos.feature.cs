// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Ticket4S.SpecTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AHomePageDoSiteDeveExibirOsEventosFeature : Xunit.IClassFixture<AHomePageDoSiteDeveExibirOsEventosFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "REQ 001 - A home page do site deve exibir os eventos.feature"
#line hidden
        
        public AHomePageDoSiteDeveExibirOsEventosFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "A home page do site deve exibir os eventos", "\tEu, como usuário do Site devo poder\r\n\tVisualizar a lista de Eventos disponíveis." +
                    "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(AHomePageDoSiteDeveExibirOsEventosFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "A home page do site deve exibir os eventos")]
        [Xunit.TraitAttribute("Description", "Preciso escolher o Evento que desejo comprar o Ingresso")]
        public virtual void PrecisoEscolherOEventoQueDesejoComprarOIngresso()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Preciso escolher o Evento que desejo comprar o Ingresso", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.When("Entar na Pagina Principal do Site", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 7
 testRunner.Then("o resultado deve conter uma lista de eventos disponiveis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 8
 testRunner.And("a Listagem deve conter somente eventos futuros", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 9
 testRunner.And("quando um evento ainda tem ingressos deve ser exibito a opcão de comprar ingresso" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 10
 testRunner.And("quando um evento já se encontra esgotado deve ser exibito mas sem a opcão de comp" +
                    "rar ingresso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AHomePageDoSiteDeveExibirOsEventosFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AHomePageDoSiteDeveExibirOsEventosFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
